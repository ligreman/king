{
    "error": {
        "unknown": "Unknown error",
        "node_connection": "Error connecting to Kong node",
        "load_loopback": "Error collecting Loopback information",
        "route_mode": "Failed to get Kong`s Router operating mode",
        "get_data": "Error getting data",
        "title": "Error in the operation - {{extra}}",
        "content": "{{extra}}",
        "field_required": "Field required"
    },
    "success": {
        "new_rsu": "Route, Service and Upstream created",
        "new_service": "Service created",
        "new_route": "Route created",
        "new_upstream": "Upstream created",
        "new_vault": "Vault created",
        "new_consumer": "Consumer created",
        "new_plugin": "Plugin created",
        "new_target": "Target created",
        "new_sni": "SNI created",
        "new_cert": "Certificate created",
        "new_cacert": "CA certificate created",
        "new_acl": "ACL created",
        "new_basic": "Basic Credential created",
        "new_key": "API Key created",
        "new_jwt": "JWT token created",
        "new_oauth2": "OAuth 2.0 token created",
        "update_service": "Service updated",
        "update_route": "Route updated",
        "update_upstream": "Upstream updated",
        "update_consumer": "Consumer updated",
        "update_vault": "Vault updated",
        "update_plugin": "Plugin updated",
        "update_sni": "SNI updated",
        "update_cert": "Certificate updated",
        "update_cacert": "CA certificate updated",
        "delete_service": "Service {{extra}} deleted",
        "delete_route": "Route {{extra}} deleted",
        "delete_upstream": "Upstream {{extra}} deleted",
        "delete_vault": "Vault {{extra}} deleted",
        "delete_consumer": "Consumer {{extra}} deleted",
        "delete_plugin": "Plugin {{extra}} deleted",
        "delete_target": "Target {{extra}} deleted",
        "delete_sni": "SNI {{extra}} deleted",
        "delete_cert": "Certificate {{extra}} deleted",
        "delete_cacert": "CA certificate {{extra}} deleted",
        "delete_acl": "ACL {{extra}} deleted",
        "delete_basic": "Basic Credential {{extra}} deleted",
        "delete_jwt": "JWT token {{extra}} removed",
        "delete_oauth2": "OAuth 2.0 token {{extra}} removed",
        "delete_key": "API Key {{extra}} deleted",
        "healthy_target": "Target {{extra}} set as healthy",
        "unhealthy_target": "Target {{extra}} set as unhealthy",
        "healthy_address": "Address {{extra}} set as healthy",
        "unhealthy_address": "Address {{extra}} set as unhealthy",
        "enabled_plugin": "Plugin {{extra}} enabled",
        "disabled_plugin": "Plugin {{extra}} disabled"
    },
    "text": {
        "id_extra": "ID: {{extra}}",
        "kong_node": "Kong node",
        "documentation": "Documentation",
        "advanced_fields": "Advanced fields",
        "search": "Search",
        "create": "Create",
        "info": "Information",
        "info_short": "Info",
        "edit": "Edit",
        "delete": "Delete",
        "cancel": "Cancel",
        "accept": "Accept",
        "name": "Name",
        "id": "ID",
        "created_at": "Created at",
        "updated_at": "Updated at",
        "tags": "Tags",
        "true": "Yes",
        "false": "No",
        "health": "Health",
        "enabled": "Habilitado",
        "seconds": "seconds",
        "to": "until",
        "consumer": "Consumer",
        "templates": "Templates available",
        "templates_hint": "You can use a previously created element as a template for the new one"
    },
    "pagination": {
        "itemsPerPageLabel": "Items per page:",
        "nextPageLabel": "Next page",
        "previousPageLabel": "Previous page",
        "firstPageLabel": "First page",
        "lastPageLabel": "Last page",
        "ofLabel": " of "
    },
    "dialog": {
        "confirm": {
            "delete_service_title": "Delete service",
            "delete_service": "Do you want to delete this service?",
            "delete_route_title": "Delete route",
            "delete_route": "Do you want to delete this route?",
            "delete_upstream_title": "Delete upstream",
            "delete_upstream": "Do you want to delete this upstream?",
            "delete_vault_title": "Delete vault",
            "delete_vault": "Do you want to delete this vault?",
            "delete_consumer_title": "Delete consumer",
            "delete_consumer": "Do you want to delete this consumer?",
            "delete_target_title": "Delete target",
            "delete_target": "Do you want to delete this target?",
            "delete_sni_title": "Delete SNI",
            "delete_sni": "Do you want to delete this SNI?",
            "delete_cert_title": "Delete certificate",
            "delete_cert": "Do you want to delete this certificate? This will also delete the SNIs associated with it",
            "delete_cacert_title": "Delete CA certificate",
            "delete_cacert": "Do you want to delete this CA certificate?",
            "delete_plugin_title": "Delete plugin",
            "delete_plugin": "Do you want to delete this plugin?",
            "delete_acl_title": "Delete ACL",
            "delete_acl": "Do you want to delete this ACL?",
            "delete_basic_title": "Delete Basic Auth Credential",
            "delete_basic": "Do you want to remove this Basic Auth Credential?",
            "delete_jwt_title": "Delete JWT token",
            "delete_jwt": "Do you want to remove this JWT token validation?",
            "delete_oauth2_title": "Eliminate the OAuth 2.0 token",
            "delete_oauth2": "Do you want to remove this OAuth 2.0 token?",
            "delete_key_title": "Delete API Key",
            "delete_key": "Do you want to delete this API Key?",
            "enable_plugin_title": "Enable plugin",
            "enable_plugin": "Do you want to enable this plugin?",
            "disable_plugin_title": "Disable plugin",
            "disable_plugin": "Do you want to disable this plugin"
        },
        "download_json": "Download in JSON",
        "copy_clipboard": "Copy to clipboard",
        "about": {
            "title": "About King",
            "developer": "King is developed by",
            "github": "You can find the project in",
            "page": "Project page"
        },
        "settings": {
            "header": "Configuration",
            "config": "General",
            "config_url": "Configuration file url",
            "config_url_hint": "Url pointing to a .json configuration file",
            "documentation": "See more documentation",
            "loopback": "Kong API Loopback",
            "error": {
                "general": "There are errors in some configuration field",
                "config_url": "Must be a valid url pointing to a .json file"
            },
            "save": "Save settings",
            "saved": "Settings updated"
        }
    },
    "header": {
        "menu": {
            "graph": "Architect",
            "elements": "Elements",
            "plugins": "Plugins",
            "certs": "Certificates",
            "services": "Services",
            "routes": "Routes",
            "upstreams": "Upstreams",
            "consumers": "Consumers",
            "vaults": "Vaults",
            "certificates": "Certificates",
            "cacerts": "CA certificates",
            "snis": "SNIs",
            "acl": "Access control",
            "acls": "ACL groups",
            "basic": "Basic Auth Credentials",
            "keys": "API keys",
            "jwt": "JWT tokens",
            "oauth2": "OAuth 2.0 Credentials",
            "settings_tooltip": "King configuration",
            "kong_node": "Kong node admin API",
            "kong_node_hint": "Type the path to the Kong admin api",
            "kong_node_tooltip": "Type in the URL and port",
            "kong_node_button_tooltip": "Connect",
            "error_node_field": "Must be a valid url. Format: http(s)://<admin-api>:<port>"
        },
        "node_connected": "Connected to node {{extra}}"
    },
    "footer": {
        "about": "About",
        "manual": "User manual"
    },
    "landing": {
        "title": "Type here the address and port of the administration API of a Kong node, and click on the arrow to connect",
        "subtitle": "If you have connected with a node previously you will see it in the selector"
    },
    "information": {
        "node": "Kong node information",
        "database": "Database",
        "hostname": "Hostname",
        "router_mode": "Router mode",
        "db": {
            "name": "Name",
            "host": "Host",
            "port": "Port",
            "username": "Username",
            "timeout": "Timeout",
            "ssl": "SSL",
            "ssl_verify": "SSL verify"
        },
        "server": "Connections",
        "plugins": "Available and in use plugins",
        "available": "Available",
        "used": "In use",
        "download_info": "Download information JSON",
        "download_status": "Download status JSON",
        "version": "Version",
        "admin_listen": "Administration API",
        "admin_ssl": "SSL administration API",
        "proxy_listen": "Gateway proxy API",
        "proxy_ssl": "SSL gateway proxy API",
        "cluster_control_plane": "Cluster control plane",
        "anonymous_reports": "Send anonymous reports",
        "files": {
            "title": "Files",
            "proxy_access_log": "Proxy: access",
            "proxy_error_log": "Proxy: error",
            "nginx_acc_logs": "Nginx: access",
            "nginx_err_logs": "Nginx: error",
            "admin_acc_logs": "Admin: access",
            "admin_access_log": "Admin: access",
            "admin_error_log": "Admin: error",
            "nginx_conf": "Nginx: configuration",
            "kong_env": "Kong: environment"
        },
        "chart": {
            "connections_accepted": "Accepted",
            "connections_active": "Active",
            "connections_waiting": "Waiting",
            "connections_writing": "Writing",
            "connections_reading": "Reading",
            "connections_handled": "Handled",
            "total_requests": "Total requests"
        }
    },
    "architect": {
        "global_actions": "Global actions",
        "local_actions_service": "Actions on service",
        "local_actions_route": "Actions on route",
        "local_actions_upstream": "Actions on upstream",
        "local_actions_consumer": "Actions on consumer",
        "local_actions_target": "Actions on target",
        "local_actions_plugin": "Actions on plugin",
        "center_network": "Adjust graph to fit all nodes",
        "clusterize_on": "Clusters enabled",
        "clusterize_off": "Clusters disabled",
        "refresh": "Refresh graph",
        "filter": "Filter by tags, separated by commas",
        "filter_hint": "You can use * as a wildcard for a tag (eg. `app*` will search all tags starting with app)",
        "filter_tooltip": "Filter",
        "filter_clear": "Reset filters",
        "filter_element_all": "Show all components",
        "filter_element_mainonly": "Show only services, routes and upstreams",
        "filter_selected_tags": "Filter by its {{num}} tags",
        "cluster_api": "Api",
        "cluster_consumers": "consumers",
        "cluster_title": "Double click to expand all elements",
        "labels": "Labels",
        "global_search": "Global search",
        "global_search_hint": "Search for any element by its ID or name"
    },
    "service": {
        "label": "Service",
        "header": "Services",
        "add": "Add Service",
        "dialog": {
            "create": "Create a new Service",
            "edit": "Edit Service",
            "info": "Service`s information",
            "name": "Name for the Service",
            "name_example": "my-service",
            "url": "Complete URL",
            "url_hint": "Must include protocol, host, port and path if it`s needed",
            "url_example": "https://example.com:80/api",
            "complete": "Different fields for each value",
            "protocol": "Protocol",
            "host": "Host or IP",
            "host_example": "example.com",
            "port": "Port",
            "port_example": "80",
            "path": "Path",
            "path_example": "/api_rest",
            "retries": "Retries",
            "enabled": "Enabled",
            "connect_timeout": "Connect timeout (ms)",
            "connect_tooltip": "Timeout for connection to the upstream server",
            "write_timeout": "Write timeout (ms)",
            "write_tooltip": "Timeout between two successive write operations for transmitting a request to the upstream server",
            "read_timeout": "Read timeout (ms)",
            "read_tooltip": "Timeout between two successive read operations for transmitting a request to the upstream server",
            "certificate": "Client certificate",
            "certificate_example": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b",
            "certificate_tooltip": "Certificate (UUID) to be used as client certificate while TLS handshaking to the upstream server",
            "ca_certificates": "CA certificates",
            "ca_certificates_example": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b\n51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515",
            "ca_certificates_tooltip": "Array of CA Certificate object UUIDs that are used to build the trust store while verifying upstream server’s TLS certificate. If set to null when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).",
            "tls_verify": "Verify TLS",
            "tls_verify_tooltip": "Whether to enable verification of upstream server TLS certificate. If left empty, then the Nginx default is respected.",
            "tls_verify_depth": "TLS depth of chain",
            "tls_verify_depth_tooltip": "Maximum depth of chain while verifying Upstream server’s TLS certificate. If left empty, then the Nginx default is respected.",
            "milliseconds_hint": "Milliseconds",
            "tags": "Tags",
            "tags_hint": "Write a tag and press enter or comma",
            "error": {
                "name_pattern": "Allowed alphanumeric characters and - _ . ~",
                "port_min_max": "Number between 0 and 65535",
                "path_pattern": "Must start with /",
                "retries_min_max": "Number between 0 and 20",
                "timeout_min_max": "Number between 1 and 2147483646",
                "tls_depth_min_max": "Number between 0 and 64",
                "protocol_path_collision": "Selected protocol does not allow any path param, leave it empty",
                "ca_certificate_pattern": "One certificate per line (UIID format)"
            }
        }
    },
    "rsu": {
        "add": "Wizard",
        "add_tooltip": "Add Route + Service + Upstream",
        "dialog": {
            "create": "Create a new Route, Service and Upstream",
            "targets": "Targets expected that the upstream will have",
            "targets_min": "Number greater than 0",
            "targets_tooltip": "It will be used to calculate the number of slots (it will be set to 100 per target)",
            "timeouts": "Base timeout for the Service (ms)",
            "timeouts_tooltip": "This timeout will be applied to the connection, reading and writing timeouts of the Service"
        }
    },
    "route": {
        "add": "Add Route",
        "header": "Routes",
        "label": "Route",
        "dialog": {
            "create": "Create a new Route",
            "edit": "Edit Route",
            "info": "Route`s information",
            "name": "Name for the Route",
            "name_example": "my-route",
            "expression": "Expression",
            "priority": "Expression priority",
            "protocols": "Protocols",
            "protocols_tooltip": "For http, at least one of methods, hosts, headers or paths. Does not allow sources or destinations.\nFor https, at least one of methods, hosts, headers, paths or snis. Does not allow sources or destinations.\nFor tcp and udp, at least one of sources or destinations. Does not allow any more.\nFor tls, at least one of sources, destinations or snis. Does not allow any more.\nFor grpc, at least one of hosts, headers or paths. Does not allow any more.\nFor grpcs, at least one of hosts, headers, paths or snis. Does not allow any more.",
            "hosts": "Hosts",
            "hosts_example": "example.com",
            "hosts_tooltip": "A list of hosts that match this Route. Allows one wildcard at the beggining or the end",
            "hosts_hint": "Write a value and press enter or coma",
            "paths": "Paths to be published",
            "paths_example": "/api_rest",
            "paths_tooltip": "A list of paths that match this Route",
            "methods": "Methods",
            "methods_tooltip": "A list of HTTP methods that match this Route",
            "redirect": "HTTP redirect status code",
            "redirect_tooltip": "The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS",
            "regex_priority": "RegExp priority",
            "regex_tooltip": "A number used to choose which route resolves a given request when several routes match it using regexes simultaneously",
            "path_handling": "Path handling",
            "path_handling_hint": "Read the documentation",
            "strip_path": "Strip path",
            "strip_path_tooltip": "When matching a Route via one of the paths, strip the matching prefix from the upstream request URL",
            "preserve_host": "Preseve host",
            "preserve_host_tooltip": "When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers",
            "request_buffering": "Request buffering",
            "response_buffering": "Response buffering",
            "snis": "SNIs",
            "snis_tooltip": "A list of SNIs that match this Route when using stream routing",
            "headers": "Headers",
            "header": "Header",
            "header_value": "Value/s",
            "header_value_hint": "Comma separated values",
            "sources": "Sources",
            "sources_ip": "IP / CIDR",
            "sources_port": "Port",
            "sources_hint": "Sources of incoming connections that match this Route when using stream routing",
            "destinations": "Destinations",
            "destinations_hint": "Destinations of incoming connections that match this Route when using stream routing",
            "transform": "Transformation",
            "field": "Field",
            "operator": "Operator",
            "value": "Value",
            "expression_tooltip": "- net.protocol: The protocol used to communicate with the upstream application.\n- net.port: Server end port number.\n- http.method: HTTP methods that match a route.\n- http.host: Lists of domains that match a route.\n- http.path: Normalized request path (without query parameters).\n- http.headers.header_name: Value of header Header-Name. Header names are converted to lower case, and - are replaced to _.\n- tls.sni: Server name indication (SNI).\n- ~: Regex matching.\n- ==: Exact match.\n- ^=: Prefix matching.\n- =^: Suffix matching.",
            "transform_lower": "Lowercase",
            "field_net.protocol": "Protocol",
            "field_net.port": "Port",
            "field_http.method": "Method",
            "field_http.host": "Host",
            "field_http.path": "Path",
            "field_http.headers.header_name": "Header",
            "field_tls.sni": "Sni",
            "error": {
                "name_pattern": "Allowed alphanumeric characters and - _ . ~",
                "port_min_max": "Number between 0 and 65535",
                "regex_min_max": "Number between 0 and 999999",
                "path_pattern": "Must start with /",
                "final_validation": "There are fields that must be filled. Read the Protocols field help for more information",
                "protocols_exclusions": "These sets are mutually exclusive: [http,https] [tcp,tls,udp] [grpc,grpcs]"
            }
        }
    },
    "upstream": {
        "add": "Add Upstream",
        "header": "Upstreams",
        "label": "Upstream",
        "targets": "Upstream´s targets",
        "health_active_on": "Enabled",
        "health_active_off": "Disabled",
        "explanation": "You can add new Target in the detail of each Upstream",
        "orphan": "Orphan upstream",
        "dialog": {
            "create": "Create a new Upstream",
            "edit": "Edit Upstream",
            "info": "Upstream`s information",
            "no_upstream": "Cannot create a new upstream because there are no service hosts available",
            "name": "Hostname for the Upstream",
            "name_hint": "Choose a host from an existing service",
            "algorithm": "Algorithm for load balancing",
            "algorithm_hint": "Information on load balancing",
            "hash_on": "Hash for load balancing",
            "hash_on_tooltip": "What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing",
            "hash_fallback": "Hash fallback",
            "hash_fallback_tooltip": "What to use as hashing input if the primary hash_on does not return a hash",
            "hash_on_header": "Header on hash",
            "hash_on_header_tooltip": "The header name to take the value from as hash input. Only required when Hash is set to 'header'",
            "hash_fallback_header": "Header on fallback",
            "hash_fallback_header_tooltip": "The header name to take the value from as hash input. Only required when Hash fallback is set to 'header'",
            "hash_on_query_arg": "Query arguments on hash",
            "hash_on_query_arg_tooltip": "The name of the query string argument to take the value from as hash input. Only required when Hash is set to 'query_arg'",
            "hash_fallback_query_arg": "Query arguments on fallback",
            "hash_fallback_query_arg_tooltip": "The name of the query string argument to take the value from as hash input. Only required when Hash fallback is set to 'query_arg'",
            "hash_on_uri_capture": "Uri capture on hash",
            "hash_on_uri_capture_tooltip": "The name of the route URI capture to take the value from as hash input. Only required when Hash is set to 'uri_capture'",
            "hash_fallback_uri_capture": "Uri capture on fallback",
            "hash_fallback_uri_capture_tooltip": "The name of the route URI capture to take the value from as hash input. Only required when Hash fallback is set to 'uri_capture'",
            "hash_on_cookie": "Cookie name",
            "hash_on_cookie_tooltip": "The cookie name to take the value from as hash input. Only required when Hash or Hash fallback is set to 'cookie'. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response",
            "hash_on_cookie_path": "Cookie path",
            "hash_on_cookie_path_tooltip": "The cookie path to set in the response headers. Only required when Hash or Hash fallback is set to 'cookie'",
            "certificate": "Client certificate",
            "certificate_example": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b",
            "certificate_tooltip": "Certificate (UUID) to be used as client certificate while TLS handshaking to the upstream server",
            "health": "Health of the upstream",
            "health_target": "Health check of the targets",
            "health_active": "Active health checks",
            "health_passive": "Passive health checks (in proxied traffic)",
            "health_active_headers": "Headers",
            "health_active_headers_tooltip": "One or more lists of values indexed by header name to use in GET HTTP request to run as a probe on active health checks. Values must be pre-formatted.",
            "health_active_healthy": "Active checks on healthy targets",
            "health_active_unhealthy": "Active checks on unhealthy targets",
            "health_passive_healthy": "Passive checks on healthy targets",
            "health_passive_unhealthy": "Passive checks on unhealthy targets",
            "host_tooltip": "The hostname to be used as Host header when proxying requests through Kong",
            "slots": "Slots",
            "slots_tooltip": "The number of slots in the loadbalancer algorithm",
            "https_verify_certificate": "Verify remote host certificate",
            "https_verify_certificate_tooltip": "Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS",
            "type_healthcheck": "Health check type",
            "type_healthcheck_tooltip": "Whether to perform health checks using HTTP or HTTPS, or just attempt a TCP connection",
            "http_path": "Path for HTTP request checks",
            "http_path_tooltip": "Path to use in GET HTTP request to run as a probe on active health checks",
            "https_sni": "SNI hostname for HTTPS health checks",
            "https_sni_tooltip": "The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI",
            "timeout": "HTTP request timeout (seconds)",
            "concurrency": "Targets to check concurrently",
            "http_statuses": "HTTP statuses to consider target as healthy",
            "http_statuses_unhealthy": "HTTP statuses to consider target as unhealthy",
            "interval": "Interval between health checks",
            "interval_healthy": "Check healthy targets every",
            "interval_unhealthy": "Check unhealthy targets every",
            "interval_tooltip": "Interval between health checks in seconds (0 to disable checks)",
            "successes": "Number of successes",
            "successes_tooltip": "Number of successes in checks to consider a target healthy",
            "http_failures": "Número de fallos HTTP",
            "http_failures_tooltip": "Number of HTTP failures in active probes to consider a target unhealthy",
            "tcp_failures": "Número de fallos TCP",
            "tcp_failures_tooltip": "Number of TCP failures in active probes to consider a target unhealthy",
            "timeouts": "Number of timeouts",
            "timeouts_tooltip": "Number of timeouts to consider a target as unhealthy",
            "threshold": "Percentage of targets to consider upstream healthy",
            "threshold_tooltip": "The minimum percentage of the upstream’s targets´ weight that must be available for the whole upstream to be considered healthy",
            "error": {
                "host_format": "Must be a valid hostname",
                "sni_format": "Must be a valid SNI",
                "header_format": "Allowed numbers, uppercase and lowercase characters and - _",
                "cookie_format": "All characters allowed but comma, semi-colon and white spaces",
                "path_pattern": "Must start with /",
                "hash_on_form": "When selecting 'header' as Hash value, the Hash header field is mandatory",
                "hash_fallback_form": "When selecting 'header' as Fallback value, the Fallback header field is mandatory",
                "hash_cookie_form": "When selecting 'cookie' as Hash or Fallback value, the Name and Cookie path fields are mandatory",
                "slots_min_max": "Number between 10 and 65536",
                "timeout_min_max": "Number between 0 and 65535",
                "concurrency_min_max": "Number between 0 and 2147483648",
                "threshold_min_max": "Percentage between 0 and 100",
                "http_statuses": "Must be a valid HTTP status code"
            }
        }
    },
    "vault": {
        "label": "Vault",
        "header": "Vaults",
        "add": "Add Vault",
        "dialog": {
            "create": "Create a new Vault",
            "edit": "Edit Vault",
            "info": "Vault`s information",
            "name": "Name for the Vault",
            "name_example": "my-vault",
            "prefix": "Prefix",
            "description": "Description",
            "config": "Config properties",
            "config_param": "Parameter",
            "config_value": "Value",
            "config_value_hint": "Check the vault documentation",
            "config_params": "Configuration parameters"
        }
    },
    "consumer": {
        "add": "Add Consumer",
        "label": "Consumer",
        "header": "Consumers",
        "dialog": {
            "create": "Create a new Consumer",
            "edit": "Edit Consumer",
            "username": "Username",
            "custom_id": "Custom ID",
            "custom_id_tooltip": "Field for storing an existing unique ID for the Consumer, useful for mapping Kong with users in your existing database",
            "error": {
                "final_validation": "Must include username or custom ID"
            }
        }
    },
    "plugin": {
        "add": "Add Plugin",
        "config": "Plugin´s configuration",
        "label": "Plugin",
        "header": "Plugins",
        "dialog": {
            "create": "Create a new Plugin",
            "edit": "Edit Plugin",
            "info": "Plugin´s information",
            "name": "Name of the Plugin",
            "instance_name": "Alias of the Plugin",
            "instance_name_hint": "Custom name to identify an instance of the plugin",
            "alias": "Alias",
            "enable": "Enable plugin",
            "enabled": "Enabled",
            "plugin_link": "Check the plugin´s documentation",
            "config": "Plugin´s configuration",
            "protocols": "Protocols",
            "protocols_tooltip": "A list of the request protocols that will trigger this plugin",
            "route_tooltip": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used",
            "service_tooltip": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched",
            "consumer_tooltip": "If set, the plugin will activate only for requests where the specified consumer has been authenticated (note that some plugins can not be restricted to consumers this way). Leave unset for the plugin to activate regardless of the authenticated Consumer",
            "min": "Number greater than {{min}}",
            "max": "Number lower than {{max}}",
            "min_max": "Number between {{min}} and {{max}}",
            "map": "JSON format. Example -> {\"request.headers\":\"return nil\"}",
            "add_to_list": "Add to list",
            "clean_list": "Empty list",
            "comma_separated_hint": "Comma separated values"
        },
        "error": {
            "map": "Field {{field}} must be a valid JSON",
            "readMap": "Error reading the field {{field}}: it is not a valid JSON"
        }
    },
    "target": {
        "add": "Add Target",
        "header": "Targets",
        "set_healthy": "Set as healthy",
        "set_unhealthy": "Set as unhealthy",
        "set_healthy_title": "Set target as healthy",
        "set_healthy_content": "Confirm that you want to set it as healthy.",
        "set_unhealthy_title": "Set target as unhealthy",
        "set_unhealthy_content": "Confirm that you want to set it as unhealthy.",
        "health_DNS_ERROR": "DNS error",
        "health_HEALTHCHECKS_OFF": "Health checks disabled",
        "health_HEALTHY": "Healthy",
        "health_UNHEALTHY": "Unhealthy",
        "health_UNKNOWN": "Unknown",
        "info_health": "Target`s health status",
        "addresses_percent": "Addresses available percentage",
        "dialog": {
            "create": "Create a new Target for the upstream {{up}}",
            "info": "Target`s information",
            "target": "Target address (ip or hostname)",
            "target_tooltip": "The target address (ip or hostname). If the hostname resolves to an SRV record, the port value will be overridden by the value from the DNS record",
            "target_hint": "(Host or IP)",
            "target_example": "example.com",
            "weight": "Weight",
            "weight_tooltip": "The weight this target gets within the upstream loadbalancer (0-65535). If the hostname resolves to an SRV record, the weight value will be overridden by the value from the DNS record",
            "error": {
                "target_format": "The format is [Host or IP]:port",
                "weight_min_max": "Number between 0 and 65535"
            }
        }
    },
    "address": {
        "label": "Addresses",
        "set_healthy_title": "Set address as healthy",
        "set_unhealthy_title": "Set address as unhealthy"
    },
    "sni": {
        "add": "Add SNI",
        "header": "SNIs",
        "dialog": {
            "create": "Create a new SNI",
            "edit": "Edit SNI",
            "info": "SNI`s information",
            "name": "Name",
            "name_tooltip": "The SNI name to associate with the given certificate",
            "certificate": "Client certificate",
            "certificate_tooltip": "The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object",
            "no_certificate": "Cannot create SNI because there is no certificate available"
        }
    },
    "cert": {
        "add": "Add Certificate",
        "header": "Certificates",
        "dialog": {
            "create": "Create a new Certificate",
            "edit": "Edit Certificate",
            "certificate": "Public Certificate (PEM)",
            "key": "Private key (PEM)",
            "certificate_alt": "Alternative public Certificate",
            "key_alt": "Alternative private key",
            "snis": "SNIs"
        }
    },
    "cacert": {
        "add": "Add CA Certificate",
        "header": "CA Certificates",
        "dialog": {
            "create": "Create a new CA Certificate",
            "edit": "Edit CA Certificate",
            "certificate": "Public CA Certificate (PEM)",
            "key": "Private key (PEM)",
            "certificate_alt": "Alternative public CA Certificate",
            "key_alt": "Alternative private key",
            "digest": "SHA256 hash",
            "error": {
                "digest": "Must be a SHA256 hash"
            }
        }
    },
    "acl": {
        "add": "Add ACL",
        "header": "ACLs",
        "delete_acl": "Remove the ACL from the consumer",
        "delete_acl_content": "Confirm that you want to remove this ACL from the consumer.",
        "explanation": "To add a new ACL go to the consumers section",
        "dialog": {
            "info": "Consumer`s ACLs",
            "groups": "ACL groups assigned to the consumer",
            "add_group": "Group to add",
            "group": "Group",
            "error": {
            }
        }
    },
    "basicauth": {
        "add": "Add Basic Auth",
        "header": "Basic Auth Credentials",
        "delete_key": "Remove the Basic Auth Credentials from the consumer",
        "delete_key_content": "Confirm that you want to remove this Basic Auth Credentials from the consumer.",
        "explanation": "To add Basic Auth Credentials go to the consumers section",
        "dialog": {
            "info": "Consumer`s Basic Auth Credentials",
            "keys": "Basic Auth Credentials assigned to the consumer",
            "add_user": "Username",
            "add_pass": "Password",
            "error": {
            }
        }
    },
    "apikey": {
        "add": "Add Api Key",
        "header": "API Keys",
        "delete_key": "Remove the API Key from the consumer",
        "delete_key_content": "Confirm that you want to remove this API Key from the consumer.",
        "explanation": "To add a new API Key go to the consumers section",
        "dialog": {
            "info": "Consumer`s API Keys",
            "keys": "API Keys assigned to the consumer",
            "add_key": "API Key to add",
            "add_key_hint": "Leave empty to auto-generate one",
            "expiration_ttl": "Expires at",
            "add_ttl": "TTL in seconds",
            "add_ttl_hint": "0 = no expiration",
            "key": "API Key",
            "error": {
            }
        }
    },
    "jwt": {
        "add": "Add JWT token validation",
        "header": "Valid JWT tokens",
        "delete_key": "Remove consumer JWT token validation",
        "delete_key_content": "Confirm that you want this JWT token to become invalid for the consumer.",
        "explanation": "To add new valid JWT tokens go to the consumer screen",
        "dialog": {
            "info": "Valid JWT tokens for the consumer",
            "add_jwt": "JWT token identifier",
            "add_jwt_hint": "Leave empty to automatically generate",
            "add_alg": "Algorithm",
            "add_alg_hint": "Used to verify the token",
            "add_rsa": "RSA public key",
            "add_rsa_hint": "For RS256 and ES256. PEM format",
            "add_secret": "Secret Text",
            "add_secret_tooltip": "Used to sign the token",
            "add_secret_hint": "Leave empty to automatically generate",
            "key": "JWT token identifier",
            "algorithm": "Algorithm",
            "rsa": "RSA public key",
            "secret": "Singing secret",
            "error": {
            }
        }
    },
    "oauth2": {
        "add": "Add OAuth 2.0 Application",
        "header": "Valid OAuth 2.0 credentials",
        "explanation": "To add new OAuth 2.0 credentials go to the consumer screen",
        "dialog": {
            "info": "OAuth 2.0 credentials for the consumer",
            "add_name": "Name for OAuth 2.0 credentials",
            "add_name_hint": "In OAuth 2.0 it is the name of the application",
            "add_id": "Unique client ID",
            "add_id_hint": "Leave empty to generate automatically",
            "add_secret": "Unique Client Secret",
            "add_secret_hint": "Leave empty to generate automatically",
            "add_uris": "URLs de redirección tras autentificación",
            "add_uris_hint": "Array of one or more URLs to which the client will be redirected after authenticating. URLs separated by commas or each one on a line",
            "add_hash_secret": "Hash secret",
            "add_hash_secret_tooltip": "Indicates if the client secret will be stored hashed",
            "name": "Name",
            "client_id": "Client ID",
            "client_secret": "Client secret",
            "redirect_uris": "Redirect URLs",
            "hash_secret": "Hash secret"
        }
    },
    "element": {
        "text_search": "search text",
        "no_data": "There is no data",
        "no_data_search": "No data matching the filter",
        "explanation": "To add an ACL, API Key or JWT token, you must first add the corresponding plugin to some element",
        "actions": "Actions",
        "credentials": "Credentials",
        "reload": "Reload data",
        "ssl": "Certificates"
    },
    "manual": {
        "title": "User manual",
        "chapter1": {
            "title": ""
        }
    }
}
